<?php

namespace Application\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\InheritanceType("SINGLE_TABLE")
 * @ORM\DiscriminatorColumn(name="account_type", type="string")
 * @ORM\DiscriminatorMap({
 *  "yandex_money" = "Application\Entity\MoneyAccount\YandexMoney",
 *  "qiwi_wallet" = "Application\Entity\MoneyAccount\QiwiWallet"
 * })
 * @ORM\Table(name="z2t_money_accounts")
 */
class MoneyAccount
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer")
     */
    protected $id;
    
    /**
     * @ORM\ManyToOne(targetEntity="Application\Entity\User", inversedBy="moneyAccounts")
     * @ORM\JoinColumn(nullable=false)
     */
    protected $user;
    
    /**
     * @ORM\Column(name="remote_identy", type="string")
     */
    protected $remoteIdenty;
    
    /**
     * @ORM\Column(name="token_storage", type="json_array")
     */
    protected $tokenStorage;
    
    /**
     * @ORM\Column(type="datetime", name="create_at")
     */
    protected $created;
    
    /**
     * @ORM\Column(type="datetime", name="update_at")
     */
    protected $updated;
    
    /**
     * @ORM\prePersist
     */
    public function setCreatedValue()
    {
        $this->created = new \DateTime();
    }
    
    /**
     * @ORM\preUpdate
     */
    public function setUpdatedValue()
    {
        $this->updated = new \DateTime();
    }
    
    /** Magic getter and setter */
    public function __get($name)
    {
        if(method_exists($this,$MethodName='get' . ucfirst($name))){
                return $this->$MethodName();
        } else {
            return null;
        }
    }
    
    public function __set($name, $value)
    {
        if(method_exists($this,$MethodName='set' . ucfirst($name))){
                return $this->$MethodName($value);
        }
        throw new \Exception('class ' . __CLASS__ . ' has no ' . $MethodName . ' method!');
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set remoteIdenty
     *
     * @param string $remoteIdenty
     * @return MoneyAccount
     */
    public function setRemoteIdenty($remoteIdenty)
    {
        $this->remoteIdenty = $remoteIdenty;
    
        return $this;
    }

    /**
     * Get remoteIdenty
     *
     * @return string 
     */
    public function getRemoteIdenty()
    {
        return $this->remoteIdenty;
    }

    /**
     * Set tokenStorage
     *
     * @param array $tokenStorage
     * @return MoneyAccount
     */
    public function setTokenStorage($tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    
        return $this;
    }

    /**
     * Get tokenStorage
     *
     * @return array 
     */
    public function getTokenStorage()
    {
        return $this->tokenStorage;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     * @return MoneyAccount
     */
    public function setCreated($created)
    {
        $this->created = $created;
    
        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return MoneyAccount
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;
    
        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set user
     *
     * @param \Application\Entity\User $user
     * @return MoneyAccount
     */
    public function setUser(\Application\Entity\User $user = null)
    {
        $this->user = $user;
    
        return $this;
    }

    /**
     * Get user
     *
     * @return \Application\Entity\User 
     */
    public function getUser()
    {
        return $this->user;
    }
}